{"ast":null,"code":"var _jsxFileName = \"/Users/jhonnymacbook/Documents/LabFiles/project02/project-phase02-cust-app-components/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { getAll, post, put, deleteById } from './memdb.js';\nimport './App.css';\nimport CustomerList from './components/CustomerList.js';\nimport CustomerAddUpdateForm from './components/CustomerAddUpdateForm.js';\nvar initialState = {\n  customers: [getAll()]\n};\nfunction App(props) {\n  let blankCustomer = {\n    \"id\": -1,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"password\": \"\"\n  };\n  const [customers, setCustomers] = useState(initialState);\n  const [formObject, setFormObject] = useState(blankCustomer);\n  let mode = formObject.id >= 0 ? 'Update' : 'Add';\n  useEffect(() => {\n    getCustomers();\n  }, []);\n  const getCustomers = function () {\n    setCustomers(initialState);\n  };\n  const handleListClick = function (item) {\n    if (formObject.hasOwnProperty('name') && item.name !== formObject.name) {\n      setFormObject(item);\n    } else {\n      setFormObject(blankCustomer);\n    }\n  };\n  const handleInputChange = function (event) {\n    const name = event.target.name;\n    const value = event.target.value;\n    let newFormObject = {\n      ...formObject\n    };\n    newFormObject[name] = value;\n    setFormObject(newFormObject);\n  };\n  let onCancelClick = function () {\n    setFormObject(blankCustomer);\n  };\n  let onDeleteClick = function () {\n    if (formObject.id >= 0) {\n      deleteById(formObject.id);\n    }\n    setFormObject(blankCustomer);\n  };\n  let onSaveClick = function () {\n    if (mode === 'Add') {\n      post(formObject);\n    }\n    if (mode === 'Update') {\n      put(formObject.id, formObject);\n    }\n    setFormObject(blankCustomer);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CustomerList, Object.assign({}, customers, {\n    formObject: formObject,\n    handleListClick: handleListClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CustomerAddUpdateForm, Object.assign({}, formObject, {\n    mode: mode\n    // formObject={formObject}\n    ,\n    handleInputChange: handleInputChange,\n    onDeleteClick: onDeleteClick,\n    onSaveClick: onSaveClick,\n    onCancelClick: onCancelClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }))));\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","getAll","post","put","deleteById","CustomerList","CustomerAddUpdateForm","initialState","customers","App","props","blankCustomer","setCustomers","formObject","setFormObject","mode","id","getCustomers","handleListClick","item","hasOwnProperty","name","handleInputChange","event","target","value","newFormObject","onCancelClick","onDeleteClick","onSaveClick","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Object","assign","className"],"sources":["/Users/jhonnymacbook/Documents/LabFiles/project02/project-phase02-cust-app-components/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { getAll, post, put, deleteById } from './memdb.js'\nimport './App.css';\nimport CustomerList from './components/CustomerList.js'\nimport CustomerAddUpdateForm from './components/CustomerAddUpdateForm.js'\n\nvar initialState = {\n  customers: [\n    getAll()\n  ]\n}\n \n\nfunction App(props) {\n  \n  let blankCustomer = { \"id\": -1, \"name\": \"\", \"email\": \"\", \"password\": \"\" };\n  const [customers, setCustomers] = useState(initialState);\n  const [formObject, setFormObject] = useState(blankCustomer);\n  let mode = (formObject.id >= 0) ? 'Update' : 'Add';\n  useEffect(() => { getCustomers() }, []);\n  const getCustomers =  function(){\n    setCustomers(initialState);\n  }\n  const handleListClick = function(item){\n    if (formObject.hasOwnProperty('name') && item.name !== formObject.name) {\n      setFormObject(item);\n    }else{\n      setFormObject(blankCustomer);\n    }\n  }  \n\n  const handleInputChange = function (event) {\n    const name = event.target.name;\n    const value = event.target.value;\n    let newFormObject = {...formObject}\n    newFormObject[name] = value;\n    setFormObject(newFormObject);\n  }\n\n  let onCancelClick = function () {\n    setFormObject(blankCustomer);\n  }\n\n  let onDeleteClick = function () {\n    if(formObject.id >= 0){\n      deleteById(formObject.id);\n    }\n    setFormObject(blankCustomer);\n  }\n\n  let onSaveClick = function () {\n    if (mode === 'Add') {\n      post(formObject);\n    }\n    if (mode === 'Update') {\n      put(formObject.id, formObject);\n    }\n    setFormObject(blankCustomer);\n  }\n\n\n  return (\n    <div>\n      <CustomerList {... customers}\n        formObject={formObject}\n        handleListClick={handleListClick}/>\n      <div className=\"boxed\">\n      <CustomerAddUpdateForm {... formObject}\n        mode={mode}\n        // formObject={formObject}\n        handleInputChange={handleInputChange}\n        onDeleteClick={onDeleteClick}\n        onSaveClick={onSaveClick}\n        onCancelClick={onCancelClick}/>\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}